;; Tree data structuret

;; A tree must have at least one node

(defun new_tree (name children)
  (list name children))

(defun new_leaf_node (name)
  (new_tree name nil))

(defun get_node_name (node)
  (car node))

(defun get_node_children (node)
  (car (cdr node)))

(defun insert_child_after (node new_child index)
  (insert_after (get_node_children node) new_child index))

(defun sprint_nodes (nodes indent)
  (if nodes
      (concat
       (sprint_node (car nodes) indent)
       (sprint_nodes (cdr nodes) indent))
    ""))

(defun sprint_node (node indent)
  (concat
   (make-string indent ?\s)
   (to_string (get_node_name node))
   "\n"
   (sprint_nodes (get_node_children node) (+ indent 1))))

(defun printf_node (node)
  (printf (sprint_node node 0)))

(defun debug_printf_node (node)
  (clear_stdout)
  (printf_node node))

(debug_printf_node bt2)

(defun binary_tree (depth)
  (binary_tree_x depth 1 (- (expt 2 (+ depth 1)) 1)))

(defun binary_tree_x (depth start end)
  (let ((half (/ (+ start end) 2)))
    (if (= depth 0)
	(new_leaf_node half)
      (new_tree
       half
       (list (binary_tree_x (- depth 1) start (- half 1))
	     (binary_tree_x (- depth 1) (+ half 1) end))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Testing

(setq bt0 (binary_tree 0))
(setq bt1 (binary_tree 1))
(setq bt2 (binary_tree 2))
