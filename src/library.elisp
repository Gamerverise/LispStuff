;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Our Library
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global Configurations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (setq explicit-shell-file-name "C:\\cygwin64\\bin\\bash")
;; (setq explicit-bash-args '("--login"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Builtin Redefinitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fset 'yes-or-no-p 'y-or-n-p)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compilation Variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq src_root_dir "c:\\home\\Gamerverise Q J\\Lisp Stuff\\src\\")

(setq git_repo_relative_filenames
      '(
       "library.elisp"
       "tree.elisp"
       "data_tree.elisp"
       ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Shortcuts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;     (save_project)
;;     (eval_project)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Key Bindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "<f12>") 'eval_project)

(global-set-key (kbd "<f9>") 'save_project)
(global-set-key (kbd "<f8>") 'commit_and_push)
(global-set-key (kbd "<f7>") 'close_git_shell)

(global-set-key (kbd "C-x C-<delete>") 'clear_stdout)

;;(defun kill_buffer_prev_window ()
  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compiling
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun src_full_filename (git_repo_relative_filename)
  (concat src_root_dir git_repo_relative_filename))

(defun double_quote (str)
  (concat "\"" str "\""))

(defun save_project ()
  "Save our source files."
  (interactive)
  (mapc 'save-buffer git_repo_relative_filenames))

(defun eval_project ()
  "Evaluate some of the project source files."
  (interactive)
  (map-y-or-n-p
   "Evaluate file %s? "
   (lambda (git_repo_relative_filename)
     (load-file (double_quote (src_full_filename git_repo_relative_filename))))
   git_repo_relative_filenames))
;; (eval_project)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Git
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq git_io_buf_name "** Git I/O **")

(defun get_git_buf ()
  (get-buffer git_io_buf_name))

(defun start_git_shell ()
  (interactive)
    (if (not (get-buffer git_io_buf_name))
	(progn
	  (let ((cur_win (selected-window)))
	    (shell git_io_buf_name)
	    (select-window cur_win)))))

(defun close_git_shell ()
  (interactive)
  (if (get-buffer git_io_buf_name)
      (progn
	(kill-process git_io_buf_name)
	(sleep-for 0 100)
	(kill-buffer git_io_buf_name))))

(defun commit_and_push ()
  "Add, commit, and push some of the project source files."
  (interactive)
  (save-some-buffers)
  (start_git_shell)
  (bprintf (get_git_buf) "\n")
  (map-y-or-n-p
   "Add file %s for commit and push? "
   (lambda (git_repo_relative_filename)
     (git_cmd 'add '--verbose git_repo_relative_filename))
   git_repo_relative_filenames)
  (git_cmd 'commit '--verbose '-m "Work in progress")
  (git_cmd 'push '-u 'origin 'master))

;;k

;;(commit_and_push)

(defun send_shell_cmd_raw (buf cmd)
  (interactive)
  (with-current-buffer buf
    (end-of-buffer)
    (princ cmd buf)
    (comint-send-input)))

(defun send_shell_cmd (buf cmd &rest args)
  (interactive)
  (send_shell_cmd_raw buf (apply 'mk_shell_cmd cmd args)))

;; (send_shell_cmd (get_git_buf) 'hmm 'a 'b)

(setq git_executable "c:\\cygwin64\\bin\\git")

(defun git_cmd (&rest git_args)
  (interactive)
  (start_git_shell)
  (apply 'send_shell_cmd (get_git_buf) git_executable git_args))

(defun mk_shell_cmd (cmd &rest args)
  (interactive)
  (mapconcat
   (lambda (arg)
     (shell-quote-argument (to_string arg)))
   (cons cmd args)
   " "))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Operators
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun != (a b)
  (not (= a b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Conversion
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun to_string (obj)
  (cond ((numberp obj) (number-to-string obj))
	((symbolp obj) (symbol-name obj))
	((stringp obj) obj)))

(setq stdout (get-buffer-create "** stdout **"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Printing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun printf (obj)
  (interactive)
  (let ((cur_buf (buffer-name)))
    (set-buffer stdout)
    (goto-char (point-max))
    (princ obj stdout)
    (set-buffer cur_buf)))

(defun printf (obj)
  (interactive)
  (bprintf stdout obj))

(defun bprintf (buf obj)
  (interactive)
  (with-current-buffer buf
    (goto-char (point-max)))
  (princ obj buf))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Buffer Management
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun clear_buffer (buf)
  "Clear a buffer."
  (interactive "BBuffer to clear: ")
  (with-current-buffer buf (erase-buffer)))

(defun clear_stdout ()
  "Clear the stdout buffer."
  (interactive)
  (clear_buffer stdout))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Math Functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun factorial (n)
       (if (= n 1)
       	   1
	   (* n (factorial (- n 1)))))


(defun fact_iter (n)
       (let ((result 1))
       (dotimes (k n result)
       		(setq result (* result (+ k 1))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; List Access
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun caddr (list) (cadr (cdr list)))

(defun cnr (list n)
       (if (= n 1)
       (car list)
       (cnr (cdr list) (- n 1))))

(defun cnr_iter (list n)
	 (dotimes (k (- n 1) (car list))
	   (setq list (cdr list))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; List Modification
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun insert_after (list value index)
  (if (= index 0)
      (setcdr list (cons value (cdr list)))
    (insert_after (cdr list) value (- index 1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Debugging Functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun debug_symbol (symbol)
  (interactive)
  (list
   (list "value: " (symbol-value symbol))
   (list "name: " (symbol-name symbol))
   (list "function: " (symbol-function symbol))
   (list "property list: " (symbol-plist symbol))
   (list "file: " (symbol-file symbol))))

(defun symbol_type (obj)
  (cond ((numberp obj) "number")
	((symbolp obj) "symbol")
	((stringp obj) "string")
	((listp obj)   "list")
	((arrayp obj)  "array")))
