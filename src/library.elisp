;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Our Library

;; Compilation Variables

(setq src_root_dir "c:\\home\\Gamerverise Q J\\Lisp Stuff\\src\\")

(setq elisp_basenames_symbol
      '(
       library.elisp
       tree.elisp
       data_tree.elisp
       ))

(setq elisp_basenames_string
      (mapcar 'symbol-name elisp_basenames_symbol))

;; Shortcuts

;; (save_project)
;; (eval_project)

;; Key Bindings

(global-set-key (kbd "C-x C-<delete>") 'clear_stdout)
;; (global-set-key (kbd "<f8>") 'commit_and_push)
(global-set-key (kbd "<f9>") 'save_project)
(global-set-key (kbd "<f12>") 'eval_project)

;; Compiling

(defun src_file (filename)
  (concat src_root_dir base_filename))

(defun save_project ()
  "Save our source files."
  (interactive)
  (mapc 'save-buffer elisp_basenames_symbol))

(defun eval_project ()
  "Evaluate some of the project source files."
  (interactive)
  (map-y-or-n-p
   "Evaluate file %s? "
   (lambda (base_filename)
     (load-file (src_file  base_filename)))
   elisp_basenames_string))
;; (eval_project)

;; Git

(setq git_output_buf "** Git Output **")

(defun commit_and_push ()
  "Add, commit, and push some of the project source files."
  (interactive)
  (save-some-buffers)
  (generate-new-buffer git_output_buf)
  (bprintf git_output_buf "\n")
  (map-y-or-n-p
   "Add file %s for commit and push? "
   (lambda (base_filename)
     (call-process "git" nil git_output_buf t "add" "--verbose" (src_file base_filename)))
   elisp_basenames_string)
  (call-process "git" nil git_output_buf t "commit" "--verbose" "-m" "Work in progress")
;;  (call-process "git" nil git_output_buf t "push" "-u" "origin" "master")
  )

(commit_and_push)

;; Operators

(defun != (a b)
  (not (= a b)))

;; Conversion

(defun to_string (obj)
  (cond ((numberp obj) (number-to-string obj))
	((stringp obj) obj)))

(setq stdout (get-buffer-create "stdout"))

;; Printing

(defun printf (obj)
  (let ((cur_buf (buffer-name)))
    (set-buffer stdout)
    (goto-char (point-max))
    (princ obj stdout)
    (set-buffer cur_buf)))

(defun printf (obj)
  (bprintf stdout obj))

(defun bprintf (buf obj)
  (with-current-buffer buf
    (goto-char (point-max)))
  (princ obj stdout))

;; Buffer Management

(defun clear_buffer (buf)
  "Clear a buffer."
  (interactive "BBuffer to clear: ")
  (with-current-buffer buf (erase-buffer)))

(defun clear_stdout ()
  "Clear the stdout buffer."
  (interactive)
  (clear_buffer stdout))

;; Math Functions

(defun factorial (n)
       (if (= n 1)
       	   1
	   (* n (factorial (- n 1)))))


(defun fact_iter (n)
       (let ((result 1))
       (dotimes (k n result)
       		(setq result (* result (+ k 1))))))

;; List Access

(defun caddr (list) (cadr (cdr list)))

(defun cnr (list n)
       (if (= n 1)
       (car list)
       (cnr (cdr list) (- n 1))))

(defun cnr_iter (list n)
	 (dotimes (k (- n 1) (car list))
	   (setq list (cdr list))))

;; List Modification

(defun insert_after (list value index)
  (if (= index 0)
      (setcdr list (cons value (cdr list)))
    (insert_after (cdr list) value (- index 1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
